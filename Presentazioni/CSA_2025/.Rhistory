scale_fill_gradient2(low = "blue", high = "red", mid = "white",midpoint =0, space = "Lab",name=NAME)+
xlab("")+ylab("")+coord_fixed()+
theme(plot.margin = unit(U, "cm"),
text=element_text(size=textsize),
axis.text.x=element_text(angle=angle),
legend.text = element_text(size = legendsize),legend.title = element_text(size = legendsize))
if (values) {
GGcor <- GGcor + geom_text(aes(Var2, Var1, label = round(value,2)), color = "black", size = corrsize )
}
print(GGcor)
}
# ++++++++++++++++++++++++++++
#' @name perm.test
#' @description Esegue test di permutazione su overlapping,
#'differenza tra medie e rapporto tra varianze
#' @param x = lista di due elementi (\code{x1} e \code{x2} )
#' @param B = numero di permutazioni da effettuare
#' @return Restituisce una lista con tre elementi:
#' obs = valore osservato di non-sovrapposizione
#'       \coed{1-eta}
#' perm = valori della stessa statistica ottenute
#'        via permutazione
#' pval = p-value
perm.test <- function (x, B = 1000,
return.distribution = FALSE, ...)
{
# control
args <- c(as.list(environment()), list(...))
pairsOverlap <- ifelse(length(x)==2, FALSE, TRUE)
N <- unlist( lapply(x,length) )
out <- overlap(x, ...)
if (pairsOverlap) {
zobs <- 1-out$OVPairs
Zperm <- t(sapply(1:B, function(b) {
xListperm <- perm.pairs( x )
ovperm <- unlist( lapply(xListperm, overlap, ...) )
zperm <- 1 - ovperm
}))
} else {
zobs <- 1-out$OV
Zperm <- t(sapply(1:B, function(b) {
xperm <- sample( unlist( x ) )
xListperm <- list( x1 = xperm[1:N[1]], x2 = xperm[(N[1]+1):(sum(N))] )
zperm <- 1 - overlap( xListperm, ... )$OV
}))
}
## (sum( zperm >= obsz ) +1) / (length( zperm )+1) LIVIO
colnames(Zperm) <- gsub("\\.OV","",colnames(Zperm))
if (nrow(Zperm) > 1) {
ZOBS <- matrix( zobs, nrow(Zperm), ncol(Zperm), byrow = TRUE )
pval <- (apply( Zperm > ZOBS, 2, sum ) + 1)/ (nrow(Zperm)+1)
} else {
pval <- (sum(Zperm > zobs)+1) / (length(Zperm)+1)
}
if (return.distribution) {
return(list(Zobs = zobs, pval = pval, Zperm = Zperm))
} else {
return(list(Zobs = zobs, pval = pval))
}
}
library(overlapping)
library(ggplot2)
EngTurk <- read.csv("~/Library/CloudStorage/OneDrive-UniversitaÌ€degliStudidiPadova/Lavoro/Conferences/Presentazioni/CSA_2025/data/EngTurk.csv")
x <- EngTurk$ReactionTime[EngTurk$item == "long time"]
y <- EngTurk$ReactionTime[EngTurk$item == "elderly mother"]
LIST <- list(x=x,y=y)
final.plot(LIST)
t.test(x,y)
library(overlapping)
normPars <- c(10,2)
unifPars <- c(0,20)
n <- 30
set.seed(36)
x <- rnorm(n, normPars[1], normPars[2])
y <- runif(n, unifPars[1], unifPars[2])
LIST<-list(x,y)
OV <- overlap(LIST)
TTEST <- t.test(x,y, var.equal = TRUE)
TTESTUNEQUAL <- t.test(x,y, var.equal = FALSE)
Y <- stack( data.frame(y1=x,y2=y) )
myData <- data.frame( x = seq(0,20,by=.1) )
myData$y1 <- dnorm(myData$x, normPars[1], normPars[2] )
myData$y2 <- dunif(myData$x, unifPars[1], unifPars[2])
myData$h <- with(myData, ifelse( y1 < y2, y1, y2 ))
AREA <- integrate( min_normal_uniform, -Inf, Inf, normPars = normPars, unifPars = unifPars )
TTEST
# Compute mean and standard error
summary_data <- Y %>%
group_by(ind) %>%
summarise(
mean_value = mean(values),
se = sd(values) / sqrt(n())
)
library(dplyr)
# Compute mean and standard error
summary_data <- Y %>%
group_by(ind) %>%
summarise(
mean_value = mean(values),
se = sd(values) / sqrt(n())
)
TTEST
theme_set(theme_bw())
ggplot(Y, aes(values,fill=ind,color=ind)) + geom_density(alpha = .5) + xlab("") + theme(legend.title = element_blank()) + ylab("") +
scale_y_continuous( breaks = NULL ) + guides(fill="none",color="none")+ ggtitle("[B]")
OV
OV_perm<- permTest(LIST, B = 1000)
OV_perm
OV_perm$pval[1]
round(OV_perm$pval[1],4)
round(OV_perm$pval[1],5)
round(OV_perm$pval[1],4)
B <- 2e3
B <- 100
n <- length(LIST[[1]])
n
zperm <- sapply( 1:B, function(x){
xperm <- sample( unlist( LIST ) )
xListperm <- list( x1 = xperm[1:n], x2 = xperm[(n+1):(n*2 )] )
1 - overlap( xListperm )$OV
})
B <- 1000
n <- length(LIST[[1]])
zperm <- sapply( 1:B, function(x){
xperm <- sample( unlist( LIST ) )
xListperm <- list( x1 = xperm[1:n], x2 = xperm[(n+1):(n*2 )] )
1 - overlap( xListperm )$OV
})
ZPERM <- data.frame(zperm)
ggplot(ZPERM,aes(zperm))+geom_vline(xintercept = obsz,lty=2) +geom_density()+ggtitle("[B]")  +xlab("") +ylab("")
obsz <- 1 - overlap( LIST )$OV
ggplot(ZPERM,aes(zperm))+geom_vline(xintercept = obsz,lty=2) +geom_density()+ggtitle("[B]")  +xlab("") +ylab("")
ggplot(ZPERM,aes(zperm))+geom_vline(xintercept = obsz,lty=2) +geom_density(fill="violet",alpha=.5)+xlab("") +ylab("")
OV_P<-round(OV_perm$pval[1],4)
OV_P
OV$OV[1]
OV<-OV$OV[1]
OV
OV
OV_P
TTEST <- t.test(x,y, var.equal = FALSE)
TTESTUNEQUAL
TTEST
TTEST <- t.test(x,y, var.equal = TRUE)
TTEST
library(sn)
library(sn)
library(tikzDevice)
library(sn)
library(tikzDevice)
PARlist <- list(
xi_vec = c(0,.5,1),
omega_vec = c(1,2,3),
alpha_vec = c(0,1,2)
)
x <- seq(-5,5,by=.1)
gData <- NULL
for (j in 1:3) {
# xi
y <- with( PARlist, dsn(x,xi_vec[j],omega_vec[1],alpha_vec[1]) )
xi <- PARlist$xi_vec[j]
omega <- PARlist$omega_vec[1]
alpha <- PARlist$alpha_vec[1]
scenario <- "xi"
dd <- data.frame(x,y,xi,omega,alpha,scenario)
gData <- rbind(gData,dd)
# omega
y <- with( PARlist, dsn(x,xi_vec[1],omega_vec[j],alpha_vec[1]) )
xi <- PARlist$xi_vec[1]
omega <- PARlist$omega_vec[j]
alpha <- PARlist$alpha_vec[1]
scenario <- "omega"
dd <- data.frame(x,y,xi,omega,alpha,scenario)
gData <- rbind(gData,dd)
# alpha
y <- with( PARlist, dsn(x,xi_vec[1],omega_vec[1],alpha_vec[j]) )
xi <- PARlist$xi_vec[1]
omega <- PARlist$omega_vec[1]
alpha <- PARlist$alpha_vec[j]
scenario <- "alpha"
dd <- data.frame(x,y,xi,omega,alpha,scenario)
gData <- rbind(gData,dd)
}
gData$xi <- factor(gData$xi)
gData$omega <- factor(gData$omega)
gData$alpha <- factor(gData$alpha)
theme_set(theme_bw())
cowplot::plot_grid(
ggplot(subset(gData,scenario=="xi"),aes(x,y,color=xi))+geom_line()+xlab("")+ylab("")+ggtitle("[A]")+theme(legend.position = "bottom")+labs(color="$\\xi$"),
ggplot(subset(gData,scenario=="omega"),aes(x,y,color=omega))+geom_line()+xlab("")+ylab("")+ggtitle("[B]")+theme(legend.position = "bottom")+labs(color="$\\omega$"),
ggplot(subset(gData,scenario=="alpha"),aes(x,y,color=alpha))+geom_line()+xlab("")+ylab("")+ggtitle("[C]")+theme(legend.position = "bottom")+labs(color="$\\alpha$"), nrow = 1
)
library(sn)
library(tikzDevice)
PARlist <- list(
xi_vec = c(0,.5,1),
omega_vec = c(1,2,3),
alpha_vec = c(0,1,2)
)
x <- seq(-5,5,by=.1)
gData <- NULL
for (j in 1:3) {
# xi
y <- with( PARlist, dsn(x,xi_vec[j],omega_vec[1],alpha_vec[1]) )
xi <- PARlist$xi_vec[j]
omega <- PARlist$omega_vec[1]
alpha <- PARlist$alpha_vec[1]
scenario <- "xi"
dd <- data.frame(x,y,xi,omega,alpha,scenario)
gData <- rbind(gData,dd)
# omega
y <- with( PARlist, dsn(x,xi_vec[1],omega_vec[j],alpha_vec[1]) )
xi <- PARlist$xi_vec[1]
omega <- PARlist$omega_vec[j]
alpha <- PARlist$alpha_vec[1]
scenario <- "omega"
dd <- data.frame(x,y,xi,omega,alpha,scenario)
gData <- rbind(gData,dd)
# alpha
y <- with( PARlist, dsn(x,xi_vec[1],omega_vec[1],alpha_vec[j]) )
xi <- PARlist$xi_vec[1]
omega <- PARlist$omega_vec[1]
alpha <- PARlist$alpha_vec[j]
scenario <- "alpha"
dd <- data.frame(x,y,xi,omega,alpha,scenario)
gData <- rbind(gData,dd)
}
gData$xi <- factor(gData$xi)
gData$omega <- factor(gData$omega)
gData$alpha <- factor(gData$alpha)
tikz("skewdis.tek")
theme_set(theme_bw())
cowplot::plot_grid(
ggplot(subset(gData,scenario=="xi"),aes(x,y,color=xi))+geom_line()+xlab("")+ylab("")+ggtitle("[A]")+theme(legend.position = "bottom")+labs(color="$\\xi$"),
ggplot(subset(gData,scenario=="omega"),aes(x,y,color=omega))+geom_line()+xlab("")+ylab("")+ggtitle("[B]")+theme(legend.position = "bottom")+labs(color="$\\omega$"),
ggplot(subset(gData,scenario=="alpha"),aes(x,y,color=alpha))+geom_line()+xlab("")+ylab("")+ggtitle("[C]")+theme(legend.position = "bottom")+labs(color="$\\alpha$"), nrow = 1
)
dev.off()
?tikz
library(sn)
library(tikzDevice)
PARlist <- list(
xi_vec = c(0,.5,1),
omega_vec = c(1,2,3),
alpha_vec = c(0,1,2)
)
x <- seq(-5,5,by=.1)
gData <- NULL
for (j in 1:3) {
# xi
y <- with( PARlist, dsn(x,xi_vec[j],omega_vec[1],alpha_vec[1]) )
xi <- PARlist$xi_vec[j]
omega <- PARlist$omega_vec[1]
alpha <- PARlist$alpha_vec[1]
scenario <- "xi"
dd <- data.frame(x,y,xi,omega,alpha,scenario)
gData <- rbind(gData,dd)
# omega
y <- with( PARlist, dsn(x,xi_vec[1],omega_vec[j],alpha_vec[1]) )
xi <- PARlist$xi_vec[1]
omega <- PARlist$omega_vec[j]
alpha <- PARlist$alpha_vec[1]
scenario <- "omega"
dd <- data.frame(x,y,xi,omega,alpha,scenario)
gData <- rbind(gData,dd)
# alpha
y <- with( PARlist, dsn(x,xi_vec[1],omega_vec[1],alpha_vec[j]) )
xi <- PARlist$xi_vec[1]
omega <- PARlist$omega_vec[1]
alpha <- PARlist$alpha_vec[j]
scenario <- "alpha"
dd <- data.frame(x,y,xi,omega,alpha,scenario)
gData <- rbind(gData,dd)
}
gData$xi <- factor(gData$xi)
gData$omega <- factor(gData$omega)
gData$alpha <- factor(gData$alpha)
tikz("skewdis.tex", standAlone = TRUE)
theme_set(theme_bw())
cowplot::plot_grid(
ggplot(subset(gData,scenario=="xi"),aes(x,y,color=xi))+geom_line()+xlab("")+ylab("")+ggtitle("[A]")+theme(legend.position = "bottom")+labs(color="$\\xi$"),
ggplot(subset(gData,scenario=="omega"),aes(x,y,color=omega))+geom_line()+xlab("")+ylab("")+ggtitle("[B]")+theme(legend.position = "bottom")+labs(color="$\\omega$"),
ggplot(subset(gData,scenario=="alpha"),aes(x,y,color=alpha))+geom_line()+xlab("")+ylab("")+ggtitle("[C]")+theme(legend.position = "bottom")+labs(color="$\\alpha$"), nrow = 1
)
dev.off()
theme_set(theme_bw())
cowplot::plot_grid(
ggplot(subset(gData,scenario=="xi"),aes(x,y,color=xi))+geom_line()+xlab("")+ylab("")+ggtitle("[A]")+theme(legend.position = "bottom")+labs(color="$\\xi$"),
ggplot(subset(gData,scenario=="omega"),aes(x,y,color=omega))+geom_line()+xlab("")+ylab("")+ggtitle("[B]")+theme(legend.position = "bottom")+labs(color="$\\omega$"),
ggplot(subset(gData,scenario=="alpha"),aes(x,y,color=alpha))+geom_line()+xlab("")+ylab("")+ggtitle("[C]")+theme(legend.position = "bottom")+labs(color="$\\alpha$"), nrow = 1
)
theme_set(theme_bw())
cowplot::plot_grid(
ggplot(subset(gData,scenario=="xi"),aes(x,y,color=xi))+geom_line()+xlab("")+ylab("")+ggtitle("[A]")+theme(legend.position = "bottom")+labs(color="$\\xi$"),
ggplot(subset(gData,scenario=="omega"),aes(x,y,color=omega))+geom_line()+xlab("")+ylab("")+ggtitle("[B]")+theme(legend.position = "bottom")+labs(color="$\\omega$"),
ggplot(subset(gData,scenario=="alpha"),aes(x,y,color=alpha))+geom_line()+xlab("")+ylab("")+ggtitle("[C]")+theme(legend.position = "bottom")+labs(color="$\\alpha$"), nrow = 1
)
normPars <- c(10,2)
unifPars <- c(0,20)
n <- 30
set.seed(36)
x <- rnorm(n, normPars[1], normPars[2])
y <- runif(n, unifPars[1], unifPars[2])
LIST<-list(x,y)
OV <- overlap(LIST)
OV_perm<- permTest(LIST, B = 1000)
OV_perm<- permTest(LIST, B = 1000)
TTEST <- t.test(x,y, var.equal = TRUE)
TTEST <- t.test(x,y, var.equal = TRUE)
TTESTUNEQUAL <- t.test(x,y, var.equal = FALSE)
x
y
length(x)
length(y)
t.test(x,y, var.equal = TRUE)
t.test(x,y, var.equal = FALSE)
sd(x)/sqrt(30)
sd(y)/sqrt(30)
rm(list=ls())
main <- "/Users/ambraperugini/Library/CloudStorage/OneDrive-UniversitaÌ€degliStudidiPadova/Lavoro/Oregon 1000 Analisi/"
datadir <- paste0(main,"data/")
library(readr)
library(readr)
rm(list=ls())
main <- "/Users/ambraperugini/Library/CloudStorage/OneDrive-UniversitaÌ€degliStudidiPadova/Lavoro/Oregon 1000 Analisi/"
datadir <- paste0(main,"data/")
library(readr)
# Import cpth01
cpt <- read.table((paste0(datadir,"cpth01.txt")), header = T, sep = "\t")
rm(list=ls())
main <- "/Users/ambraperugini/Library/CloudStorage/OneDrive-UniversitaÌ€degliStudidiPadova/Lavoro/projects/Oregon 1000 Analisi/"
datadir <- paste0(main,"data/")
library(readr)
# Import cpth01
cpt <- read.table((paste0(datadir,"cpth01.txt")), header = T, sep = "\t")
cpt <- cpt[-1,]
# Import ndar_subject01
subj <- read.table((paste0(datadir,"ndar_subject01.txt")), header = T, sep = "\t")
subj <- subj[-1,]
#Import questionaire
quest <- read.table((paste0(datadir,"adhdrs01.txt")), header = T, sep = "\t")
quest <- quest[-1,]
# remove empty columns
empty_columns <- sapply(cpt, function(x) all(is.na(x) | x == ""))
cpt<-cpt[, !empty_columns]
empty_columns <- sapply(subj, function(x) all(is.na(x) | x == ""))
subj<-subj[, !empty_columns]
empty_columns <- sapply(quest, function(x) all(is.na(x) | x == ""))
quest<-quest[, !empty_columns]
#from character to numeric
start = which(colnames(cpt)=="visit_year")
end = which(colnames(cpt)=="lnb_s")
for(i in start:end){
cpt[,i] = as.numeric(cpt[,i])
}
DATA_CPT<-merge(cpt,subj,by=c("subjectkey","interview_age"),all=T, no.dups = T)
DATA_QUEST<-merge(subj,quest,by=c("subjectkey","interview_age"),all=T, no.dups = T)
DATA_CPT$subjectkey = as.factor(DATA_CPT$subjectkey)
DATA_QUEST$subjectkey = as.factor(DATA_QUEST$subjectkey)
# now I remove 5
lvls = levels(as.factor(DATA_CPT$subjectkey))
for(lvl in lvls){
d = DATA_CPT[DATA_CPT$subjectkey==lvl,]
d$interview_age = as.numeric(d$interview_age)
d$phenotype = as.numeric(as.character(d$phenotype))
d$phenotype[d$phenotype==5] = NA
d$phenotype_original = d$phenotype
for(j in 1:nrow(d)){
if(is.na(d$phenotype[j])){
xPhe = d$phenotype_original[abs(d$interview_age[j]-d$interview_age)<=12]
xAge = d$interview_age [abs(d$interview_age[j]-d$interview_age)<=12]
diff = xAge - d$interview_age[j]
condition = diff!=0 & !is.na(xPhe)
xPhe = xPhe[condition]
xAge = xAge[condition]
d$phenotype[j] = xPhe[which.min(abs(xAge-d$interview_age[j]))][1]
}
}
DATA_CPT[DATA_CPT$subjectkey==lvl,"phenotype"] = d$phenotype
}
dedup<-!duplicated(DATA_CPT[,c(10:15)])
DATA_CPT<-DATA_CPT[dedup,]
lvls = levels(as.factor(DATA_QUEST$subjectkey))
for(lvl in lvls){
d = DATA_QUEST[DATA_QUEST$subjectkey==lvl,]
d$interview_age = as.numeric(d$interview_age)
d$phenotype = as.numeric(as.character(d$phenotype))
d$phenotype[d$phenotype==5] = NA
d$phenotype_original = d$phenotype
for(j in 1:nrow(d)){
if(is.na(d$phenotype[j])){
xPhe = d$phenotype_original[abs(d$interview_age[j]-d$interview_age)<=12]
xAge = d$interview_age [abs(d$interview_age[j]-d$interview_age)<=12]
diff = xAge - d$interview_age[j]
condition = diff!=0 & !is.na(xPhe)
xPhe = xPhe[condition]
xAge = xAge[condition]
d$phenotype[j] = xPhe[which.min(abs(xAge-d$interview_age[j]))][1]
}
}
DATA_QUEST[DATA_QUEST$subjectkey==lvl,"phenotype"] = d$phenotype
}
dedup<-!duplicated(DATA_QUEST[,c(99:104)])
DATA_QUEST<-DATA_QUEST[dedup,]
DATA_CPT$subjectkey = as.factor(as.character(DATA_CPT$subjectkey))
DATA_CPT$interview_age<-as.numeric(DATA_CPT$interview_age)
DATA_CPT$phenotype<-factor(as.numeric(DATA_CPT$phenotype))
DATA_QUEST$subjectkey = as.factor(as.character(DATA_QUEST$subjectkey))
DATA_QUEST$interview_age<-as.numeric(DATA_QUEST$interview_age)
DATA_QUEST$phenotype<-factor(as.numeric(DATA_QUEST$phenotype))
DATA_CPT<- subset(DATA_CPT[,c(1,2,10:15,26)])
DATA_QUEST<- subset(DATA_QUEST[,c(1,2,11,99:103,26,52)])
subjectkeys_with_4 <- unique(DATA_CPT$subjectkey[DATA_CPT$phenotype == "4"])
DATA_CPT <- DATA_CPT[!(DATA_CPT$subjectkey %in% subjectkeys_with_4), ]
DATA_CPT$phenotype<-factor(as.numeric(DATA_CPT$phenotype))
subjectkeys_with_4 <- unique(DATA_QUEST$subjectkey[DATA_QUEST$phenotype == "4"])
DATA_QUEST <- DATA_QUEST[!(DATA_QUEST$subjectkey %in% subjectkeys_with_4), ]
DATA_QUEST$phenotype<-factor(as.numeric(DATA_QUEST$phenotype))
DATA_QUEST$interview_age<-as.numeric(DATA_QUEST$interview_age)
DATA_QUEST$p_c_adhdrs_hyp_rs<-as.numeric(DATA_QUEST$p_c_adhdrs_hyp_rs)
DATA_QUEST$p_c_adhdrs_hyp_ts<-as.numeric(DATA_QUEST$p_c_adhdrs_hyp_ts)
DATA_QUEST$p_c_adhdrs_hypsx<-as.numeric(DATA_QUEST$p_c_adhdrs_hypsx)
DATA_QUEST$p_c_adhdrs_int_rs<-as.numeric(DATA_QUEST$p_c_adhdrs_int_rs)
DATA_QUEST$p_c_adhdrs_int_ts<-as.numeric(DATA_QUEST$p_c_adhdrs_int_ts)
DATA_QUEST$p_c_adhdrs_hyp_ts <- ifelse(DATA_QUEST$p_c_adhdrs_hyp_ts == "-999" | DATA_QUEST$p_c_adhdrs_hyp_ts == "0",NA,DATA_QUEST$p_c_adhdrs_hyp_ts)
DATA_QUEST$p_c_adhdrs_int_ts <- ifelse(DATA_QUEST$p_c_adhdrs_int_ts == "-999" | DATA_QUEST$p_c_adhdrs_int_ts == "0",NA,DATA_QUEST$p_c_adhdrs_int_ts)
DATA_QUEST$respondant <- ifelse(DATA_QUEST$relationship == "1", "Mother",
ifelse(DATA_QUEST$relationship == "2", "Father",
ifelse(DATA_QUEST$relationship == "5","Teacher", NA)))
DATA_QUEST <- subset(DATA_QUEST, !is.na(respondant))
DATA_QUEST$subjectkey <- factor(DATA_QUEST$subjectkey)
length(levels(DATA_QUEST$subjectkey))
#### NOW I DO AVEREGING FOR TIMEPOINTS AND QUEST SCORES
DATA_Q2 <- NULL
lvls = levels(DATA_QUEST$subjectkey)
for (lvl in lvls) {
d <- subset(DATA_QUEST, subjectkey == lvl)
m <- max(table(d$interview_age))
if(nrow(d)>1 & m > 1){
unique(d$interview_age)
hyp <- aggregate(p_c_adhdrs_hyp_ts ~ interview_age, data = d, FUN = mean)
int <- aggregate(p_c_adhdrs_int_ts ~ interview_age, data = d, FUN = mean)
hyp$p_c_adhdrs_int_ts <- int$p_c_adhdrs_int_ts
hyp$subjectkey <- lvl
DATA_Q2 <- rbind(DATA_Q2, hyp)
} else{
DATA_Q2 <- rbind(DATA_Q2, d[, c("interview_age", "p_c_adhdrs_hyp_ts", "p_c_adhdrs_int_ts", "subjectkey")])
}
}
#### MERGING
DATA<-merge(DATA_Q2,DATA_CPT,by=c("subjectkey","interview_age"),all=T, no.dups = T)
# table(DATA$respondant)
DATA$resc_hyp <- DATA$p_c_adhdrs_hyp_ts/10
DATA$resc_int <- DATA$p_c_adhdrs_int_ts/10
DATA$interview_age<-DATA$interview_age/12
# Now I make them match
lvls = levels(as.factor(as.character(DATA$subjectkey)))
for(lvl in lvls){
d = DATA[DATA$subjectkey==lvl,]
d$interview_age = as.numeric(d$interview_age)
d$score_hyp_original = d$resc_hyp
for(j in 1:nrow(d)){
if(is.na(d$resc_hyp[j])){
xHyp = d$score_hyp_original[abs(d$interview_age[j]-d$interview_age)<=12]
xAge = d$interview_age [abs(d$interview_age[j]-d$interview_age)<=12]
diff = xAge - d$interview_age[j]
condition = diff!=0 & !is.na(xHyp)
xHyp = xHyp[condition]
xAge = xAge[condition]
d$resc_hyp[j] = xHyp[which.min(abs(xAge-d$interview_age[j]))][1]
}
}
DATA[DATA$subjectkey==lvl,"resc_hyp"] = d$resc_hyp
}
for(lvl in lvls){
d = DATA[DATA$subjectkey==lvl,]
d$interview_age = as.numeric(d$interview_age)
d$score_int_original = d$resc_int
for(j in 1:nrow(d)){
if(is.na(d$resc_int[j])){
xInt = d$score_int_original[abs(d$interview_age[j]-d$interview_age)<=12]
xAge = d$interview_age [abs(d$interview_age[j]-d$interview_age)<=12]
diff = xAge - d$interview_age[j]
condition = diff!=0 & !is.na(xInt)
xInt = xInt[condition]
xAge = xAge[condition]
d$resc_int[j] = xInt[which.min(abs(xAge-d$interview_age[j]))][1]
}
}
DATA[DATA$subjectkey==lvl,"resc_int"] = d$resc_int
}
for(lvl in lvls){
d = DATA[DATA$subjectkey==lvl,]
d$interview_age = as.numeric(d$interview_age)
d$phenotype = as.numeric(as.character(d$phenotype))
d$phenotype_original = d$phenotype
for(j in 1:nrow(d)){
if(is.na(d$phenotype[j])){
xPhe = d$phenotype_original[abs(d$interview_age[j]-d$interview_age)<=12]
xAge = d$interview_age [abs(d$interview_age[j]-d$interview_age)<=12]
diff = xAge - d$interview_age[j]
condition = diff!=0 & !is.na(xPhe)
xPhe = xPhe[condition]
xAge = xAge[condition]
d$phenotype[j] = xPhe[which.min(abs(xAge-d$interview_age[j]))][1]
}
}
DATA[DATA$subjectkey==lvl,"phenotype"] = d$phenotype
}
DATA2 <- DATA[complete.cases(DATA$dprime1, DATA$resc_hyp), ]
str(DATA2)
summary(DATA2)
